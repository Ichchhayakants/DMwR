signals<- trading.signals(Tdata.train[,"T.ind.GSPC"], 0.1,-0.1)
norm.data <- data.frame(signals=signals, scale(Tdata.train[,-1]))
nn <- nnet(signals~., norm.data[1:1000,], size=10, decay=0.01, maxit=1000, trace=F)
preds <- predict(nn, norm.data[1001:2000,],type = "class")  ## class obtain a single class lebel for each test case
sigs.PR(preds, norm.data[1001:2000,1])
### Support Vecrtor Machine4
library(e1071)
sv <- svm(Tform,Tdata.train[1:1000,], gamma = 0.001, cost=100) ## cost = cost of violations of the margin
s.preds <- predict(sv,Tdata.train[1001:2000,])
sigs.svm <- trading.signals(s.preds, 0.1,-0.1)
true.sigs <- trading.signals(Tdata.train[1001:2000, "T.ind.GSPC"], 0.1, -0.1)
sigs.PR(sigs.svm, true.sigs)
## Classification Task using Kernlab
library(kernlab)
data <- cbind(signals= signals, Tdata.train[,-1])
ksv <- ksvm(signals ~ . ,data[1:1000,], C=10)
## using automatic sigma estimation(sigest) for RBF or Laplace kernel
ks.preds <- predict(ksv, data[1001:2000,])
sigs.PR(ks.preds, data[1001:2000,1])
## Multivariate Adaptive Regression (MARS)
library(earth)
e <- earth(Tform, Tdata.train[1:1000,])
e.preds <- predict(e, Tdata.train[1001:2000,])
sigs.e <- trading.signals(e.preds,0.1,-0.1)
true.sigs <- trading.signals(Tdata.train[1001:2000, "T.ind.GSPC"], 0.1, -0.1)
sigs.PR(sigs.e, true.sigs)
policy.1 <- function(signals,market,opened.pos,money,
bet=0.2,hold.time=10,
exp.prof=0.025, max.loss= 0.05
)
{
d <- NROW(market) # this is the ID of today
orders <- NULL
nOs <- NROW(opened.pos)
# nothing to do!
if (!nOs && signals[d] == 'h') return(orders)
# First lets check if we can open new positions
# i) long positions
if (signals[d] == 'b' && !nOs) {
quant <- round(bet*money/market[d,'Close'],0)
if (quant > 0)
orders <- rbind(orders,
data.frame(order=c(1,-1,-1),order.type=c(1,2,3),
val = c(quant,
market[d,'Close']*(1+exp.prof),
market[d,'Close']*(1-max.loss)
),
action = c('open','close','close'),
posID = c(NA,NA,NA)
)
)
# ii) short positions
} else if (signals[d] == 's' && !nOs) {
# this is the nr of stocks we already need to buy
# because of currently opened short positions
need2buy <- sum(opened.pos[opened.pos[,'pos.type']==-1,
"N.stocks"])*market[d,'Close']
quant <- round(bet*(money-need2buy)/market[d,'Close'],0)
if (quant > 0)
orders <- rbind(orders,
data.frame(order=c(-1,1,1),order.type=c(1,2,3),
val = c(quant,
market[d,'Close']*(1-exp.prof),
market[d,'Close']*(1+max.loss)
),
action = c('open','close','close'),
posID = c(NA,NA,NA)
)
)
}
# Now lets check if we need to close positions
# because their holding time is over
if (nOs)
for(i in 1:nOs) {
if (d - opened.pos[i,'Odate'] >= hold.time)
orders <- rbind(orders,
data.frame(order=-opened.pos[i,'pos.type'],
order.type=1,
val = NA,
action = 'close',
posID = rownames(opened.pos)[i]
)
)
}
orders
}
policy.2 <- function(signals,market,opened.pos,money,
bet=0.2,exp.prof=0.025, max.loss= 0.05
)
{
d <- NROW(market) # this is the ID of today
orders <- NULL
nOs <- NROW(opened.pos)
# nothing to do!
if (!nOs && signals[d] == 'h') return(orders)
# First lets check if we can open new positions
# i) long positions
if (signals[d] == 'b') {
quant <- round(bet*money/market[d,'Close'],0)
if (quant > 0)
orders <- rbind(orders,
data.frame(order=c(1,-1,-1),order.type=c(1,2,3),
val = c(quant,
market[d,'Close']*(1+exp.prof),
market[d,'Close']*(1-max.loss)
),
action = c('open','close','close'),
posID = c(NA,NA,NA)
)
)
# ii) short positions
} else if (signals[d] == 's') {
# this is the money already committed to buy stocks
# because of currently opened short positions
need2buy <- sum(opened.pos[opened.pos[,'pos.type']==-1,
"N.stocks"])*market[d,'Close']
quant <- round(bet*(money-need2buy)/market[d,'Close'],0)
if (quant > 0)
orders <- rbind(orders,
data.frame(order=c(-1,1,1),order.type=c(1,2,3),
val = c(quant,
market[d,'Close']*(1-exp.prof),
market[d,'Close']*(1+max.loss)
),
action = c('open','close','close'),
posID = c(NA,NA,NA)
)
)
}
orders
}
# Train and test periods
start <- 1
len.tr <- 1000
len.ts <- 500
tr <- start:(start+len.tr-1)
ts <- (start+len.tr):(start+len.tr+len.ts-1)
# getting the quotes for the testing period
data(GSPC)
date <- rownames(Tdata.train[start+len.tr,])
market <- GSPC[paste(date,'/',sep='')][1:len.ts]
# learning the model and obtaining its signal predictions
library(e1071)
s <- svm(Tform,Tdata.train[tr,],cost=10,gamma=0.01)
p <- predict(s,Tdata.train[ts,])
sig <- trading.signals(p,0.1,-0.1)
# now using the simulated trader
t1 <- trading.simulator(market,sig,
'policy.1',list(exp.prof=0.05,bet=0.2,hold.time=30))
t1
summary(t1)
tradingEvaluation(t1)
plot(t1,market,theme='white',name='SP500')
t2<- trading.simulator(market,sig, "policy.2", list(exp.prof= 0.05, bet=0.3))
summary(t2)
tradingEvaluation(t2)
## trading and testing with different periods
start <- 2000
len.tr <- 1000
len.ts <- 500
tr <- start:(start+len.tr -1)
ts <- (start+len.tr): (start+len.tr+len.ts -1)
s <- svm(Tform,Tdata.train[tr,], cost=10,gamma=0.01)
p <- predict(s,Tdata.train[ts,])
sig <- trading.signals(p,0.1,-0.1)
t2 <- trading.simulator(market,sig,"policy.2",list(exp.prof=0.05,bet=0.3))
summary(t2)
tradingEvaluation(t2)
## Experimental comparisions
MC.svmR<- function(form, train, test,b.t=0.1,s.t=-0.1,...) ## R- regression
{
require(e1071)
t <- svm(form,train,...)
p <- predict(t, test)
trading.signals(p,b.t,s.t)
}
MC.scmC <- function(form,train,test,b.t=0.1, s.t=-0.1,...) ## C- Classification
{
require(e1071)
tgtName <- all.vars(form)[1]
train[,tgtName] <- trading.signals(train[,tgtName], b.t, s.t)
t <- svm(form,train,...)
p <- predict(t, test)
factor(p,levels= c("s","h","b"))
}
MC.nnetR <-function(form, train, test,b.t=0.1, s.t=-0.1,...)
{
require(nnet)
t <- nnet(form,train, ...)
p <- predict(t, test)
trading.signals(p, b.t, s.t )
}
MC.nnetC <- function(form, train, test, b.t=0.1, s.t=-0.1,...)
{
require(nnet)
tgtName <- all.vars(form)[1]
train[, tgtName] <- trading.signals(train[,tgtName],b.t,s.t)
t <- nnet(form, train,...)
p <-  predict(t, test, type= "class")
factor(p, levels = c("s","h","b"))
}
MC.earth <- function(form,train, test, b.t= 0.1, s.t=-0.1,...)
{
require(earth)
t <- earth(form, train,...)
p <- predict(t, test)
trading.signals(p, b.t, s.t)
}
single <- function(form, train, test, learner, policy.func,...)
{
p <- do.call(paste("MC", learner, sep = "."), list(form,train, test,...))
eval.stats(form, train, test,p, policy.func=policy.func)
}
slide <- function(form, train, test, lesrner, relearn.step, policy.func,...)
{
real.learner <- learner(paste("MC",learner,sep = "."),pars=list(...))
p <- slidingWindowTest(real.learner,form,train,test,relearn.step)
p <- factor(p,levels = 1:3,labels = c("s","h","b"))
eval.stats(form, train, test, p, policy.func=policy.func)
}
grow <- function(form, train, test,learner,relearn.step,policy.func,...)
{
real.learner <- learner(paste("MC",learner, sep = "."), pars = list(...))
p <- growingWindowTest(real.learner, form,train, test, relearn.step)
p <- factor(p, levels = 1:3, labels = c("s","h,","b"))
eval.stat(form,train,test,p,policy.func=policy.func)
}
eval.stats <- function(form, train, test, preds, b.t=0.1, s.t= -0.1, ...)
{
# signals evaluation
tgtName <- all.vars(form)[1]
test[, tgtName] <- trading.signals(test[, tgtName],b.t, s.t)
stv <-sigs.PR(preds, test[,tgtName])
dim(st) <- NULL
names(st) <- paste(rep(c('prec','rec'), each=3), c('s','b','sb'), sep='.')
## trading evaluation
date <-rownames(test)[1]
market <- GSPC[paste(date,"/", sep='')][1:length(preds),]
trade.res <- trading.simulator(market, preds,...)
c(st, tradingEvaluation(trade.res))
}
pol1 <- function(signals, market, op, money)
policy.1(signals, market, op, money,
bet=0.2, exp.prof= 0.025, max.loss = 0.05, hold.time = 10)
pol2 <- function(signals, market, op, money)
policy.1(signals, market, op, money,
bet = 0.2, exp.prof = 0.05, max.loss = 0.05,hold.time = 20)
pol3 <- function(signals, market,op, money)
policy.2(signals, market, op, money,
bet = 0.5,exp.prof = 0.05, max.loss = 0.05)
ssssssss
pol1 <- function(signals, market, op, money)
policy.1(signals, market, op, money,
bet=0.2, exp.prof= 0.025, max.loss = 0.05, hold.time = 10)
pol2 <- function(signals, market, op, money)
policy.1(signals, market, op, money,
bet = 0.2, exp.prof = 0.05, max.loss = 0.05,hold.time = 20)
pol3 <- function(signals, market,op, money)
policy.2(signals, market, op, money,
bet = 0.5,exp.prof = 0.05, max.loss = 0.05)
load("svmR.Rdata")
# The list of learners we will use
TODO <- c('svmR','svmC','earth','nnetR','nnetC')
# The data sets used in the comparison
DSs <- list(dataset(Tform,Tdata.train,'SP500'))
# Monte Carlo (MC) settings used
MCsetts <- mcSettings(20,     # 20 repetitions of the MC exps
2540,   # ~ 10 years for training
1270,   # ~ 5 years for testing
1234)   # random number generator seed
# Variants to try for all learners
VARS <- list()
VARS$svmR   <- list(cost=c(10,150),gamma=c(0.01,0.001),
policy.func=c('pol1','pol2','pol3'))
VARS$svmC   <- list(cost=c(10,150),gamma=c(0.01,0.001),
policy.func=c('pol1','pol2','pol3'))
VARS$earth <- list(nk=c(10,17),degree=c(1,2),thresh=c(0.01,0.001),
policy.func=c('pol1','pol2','pol3'))
VARS$nnetR  <- list(linout=T,maxit=750,size=c(5,10),
decay=c(0.001,0.01),
policy.func=c('pol1','pol2','pol3'))
VARS$nnetC  <- list(maxit=750,size=c(5,10),decay=c(0.001,0.01),
policy.func=c('pol1','pol2','pol3'))
# main loop
for(td in TODO) {
assign(td,
experimentalComparison(
DSs,
c(
do.call('variants',
c(list('singleModel',learner=td),VARS[[td]],
varsRootName=paste('single',td,sep='.'))),
do.call('variants',
c(list('slide',learner=td,
relearn.step=c(60,120)),
VARS[[td]],
varsRootName=paste('slide',td,sep='.'))),
do.call('variants',
c(list('grow',learner=td,
relearn.step=c(60,120)),
VARS[[td]],
varsRootName=paste('grow',td,sep='.')))
),
MCsetts)
)
# save the results
save(list=td,file=paste(td,'Rdata',sep='.'))
}
# The list of learners we will use
TODO <- c('svmR','svmC','earth','nnetR','nnetC')
# The data sets used in the comparison
DSs <- list(dataset(Tform,Tdata.train,'SP500'))
# Monte Carlo (MC) settings used
MCsetts <- mcSettings(20,     # 20 repetitions of the MC exps
2540,   # ~ 10 years for training
1270,   # ~ 5 years for testing
1234)   # random number generator seed
# Variants to try for all learners
VARS <- list()
VARS$svmR   <- list(cost=c(10,150),gamma=c(0.01,0.001),
policy.func=c('pol1','pol2','pol3'))
VARS$svmC   <- list(cost=c(10,150),gamma=c(0.01,0.001),
policy.func=c('pol1','pol2','pol3'))
VARS$earth <- list(nk=c(10,17),degree=c(1,2),thresh=c(0.01,0.001),
policy.func=c('pol1','pol2','pol3'))
VARS$nnetR  <- list(linout=T,maxit=750,size=c(5,10),
decay=c(0.001,0.01),
policy.func=c('pol1','pol2','pol3'))
VARS$nnetC  <- list(maxit=750,size=c(5,10),decay=c(0.001,0.01),
policy.func=c('pol1','pol2','pol3'))
# main loop
for(td in TODO) {
assign(td,
experimentalComparison(
DSs,
c(
do.call('variants',
c(list('single',learner=td),VARS[[td]],
varsRootName=paste('single',td,sep='.'))),
do.call('variants',
c(list('slide',learner=td,
relearn.step=c(60,120)),
VARS[[td]],
varsRootName=paste('slide',td,sep='.'))),
do.call('variants',
c(list('grow',learner=td,
relearn.step=c(60,120)),
VARS[[td]],
varsRootName=paste('grow',td,sep='.')))
),
MCsetts)
)
# save the results
save(list=td,file=paste(td,'Rdata',sep='.'))
}
# main loop
for(td in TODO) {
assign(td,
experimentalComparison(
DSs,
c(
do.call('variants',
c(list('single',learner=td),VARS[[td]],
varsRootName=paste('single',td,sep='.'))),
do.call('variants',
c(list('slide',learner=td,
relearn.step=c(60,120)),
VARS[[td]],
varsRootName=paste('slide',td,sep='.'))),
do.call('variants',
c(list('grow',learner=td,
relearn.step=c(60,120)),
VARS[[td]],
varsRootName=paste('grow',td,sep='.')))
),
MCsetts)
)
# save the results
save(list=td,file=paste(td,'Rdata',sep='.'))
}
###################################################
### Model Evaluation and Selection
###################################################
MC.svmR <- function(form,train,test,b.t=0.1,s.t=-0.1,...) {
require(e1071)
t <- svm(form,train,...)
p <- predict(t,test)
trading.signals(p,b.t,s.t)
}
MC.svmC <- function(form,train,test,b.t=0.1,s.t=-0.1,...) {
require(e1071)
tgtName <- all.vars(form)[1]
train[,tgtName] <- trading.signals(train[,tgtName],b.t,s.t)
t <- svm(form,train,...)
p <- predict(t,test)
factor(p,levels=c('s','h','b'))
}
MC.nnetR <- function(form,train,test,b.t=0.1,s.t=-0.1,...) {
require(nnet)
t <- nnet(form,train,...)
p <- predict(t,test)
trading.signals(p,b.t,s.t)
}
MC.nnetC <- function(form,train,test,b.t=0.1,s.t=-0.1,...) {
require(nnet)
tgtName <- all.vars(form)[1]
train[,tgtName] <- trading.signals(train[,tgtName],b.t,s.t)
t <- nnet(form,train,...)
p <- predict(t,test,type='class')
factor(p,levels=c('s','h','b'))
}
MC.earth <- function(form,train,test,b.t=0.1,s.t=-0.1,...) {
require(earth)
t <- earth(form,train,...)
p <- predict(t,test)
trading.signals(p,b.t,s.t)
}
singleModel <- function(form,train,test,learner,policy.func,...) {
p <- do.call(paste('MC',learner,sep='.'),list(form,train,test,...))
eval.stats(form,train,test,p,policy.func=policy.func)
}
slide <- function(form,train,test,learner,relearn.step,policy.func,...) {
real.learner <- learner(paste('MC',learner,sep='.'),pars=list(...))
p <- slidingWindowTest(real.learner,form,train,test,relearn.step)
p <- factor(p,levels=1:3,labels=c('s','h','b'))
eval.stats(form,train,test,p,policy.func=policy.func)
}
grow <- function(form,train,test,learner,relearn.step,policy.func,...) {
real.learner <- learner(paste('MC',learner,sep='.'),pars=list(...))
p <- growingWindowTest(real.learner,form,train,test,relearn.step)
p <- factor(p,levels=1:3,labels=c('s','h','b'))
eval.stats(form,train,test,p,policy.func=policy.func)
}
eval.stats <- function(form,train,test,preds,b.t=0.1,s.t=-0.1,...) {
# Signals evaluation
tgtName <- all.vars(form)[1]
test[,tgtName] <- trading.signals(test[,tgtName],b.t,s.t)
st <- sigs.PR(preds,test[,tgtName])
dim(st) <- NULL
names(st) <- paste(rep(c('prec','rec'),each=3),
c('s','b','sb'),sep='.')
# Trading evaluation
date <- rownames(test)[1]
market <- GSPC[paste(date,"/",sep='')][1:length(preds),]
trade.res <- trading.simulator(market,preds,...)
c(st,tradingEvaluation(trade.res))
}
pol1 <- function(signals,market,op,money)
policy.1(signals,market,op,money,
bet=0.2,exp.prof=0.025,max.loss=0.05,hold.time=10)
pol2 <- function(signals,market,op,money)
policy.1(signals,market,op,money,
bet=0.2,exp.prof=0.05,max.loss=0.05,hold.time=20)
pol3 <- function(signals,market,op,money)
policy.2(signals,market,op,money,
bet=0.5,exp.prof=0.05,max.loss=0.05)
# The list of learners we will use
TODO <- c('svmR','svmC','earth','nnetR','nnetC')
# The data sets used in the comparison
DSs <- list(dataset(Tform,Tdata.train,'SP500'))
# Monte Carlo (MC) settings used
MCsetts <- mcSettings(20,     # 20 repetitions of the MC exps
2540,   # ~ 10 years for training
1270,   # ~ 5 years for testing
1234)   # random number generator seed
# Variants to try for all learners
VARS <- list()
VARS$svmR   <- list(cost=c(10,150),gamma=c(0.01,0.001),
policy.func=c('pol1','pol2','pol3'))
VARS$svmC   <- list(cost=c(10,150),gamma=c(0.01,0.001),
policy.func=c('pol1','pol2','pol3'))
VARS$earth <- list(nk=c(10,17),degree=c(1,2),thresh=c(0.01,0.001),
policy.func=c('pol1','pol2','pol3'))
VARS$nnetR  <- list(linout=T,maxit=750,size=c(5,10),
decay=c(0.001,0.01),
policy.func=c('pol1','pol2','pol3'))
VARS$nnetC  <- list(maxit=750,size=c(5,10),decay=c(0.001,0.01),
policy.func=c('pol1','pol2','pol3'))
# main loop
for(td in TODO) {
assign(td,
experimentalComparison(
DSs,
c(
do.call('variants',
c(list('singleModel',learner=td),VARS[[td]],
varsRootName=paste('single',td,sep='.'))),
do.call('variants',
c(list('slide',learner=td,
relearn.step=c(60,120)),
VARS[[td]],
varsRootName=paste('slide',td,sep='.'))),
do.call('variants',
c(list('grow',learner=td,
relearn.step=c(60,120)),
VARS[[td]],
varsRootName=paste('grow',td,sep='.')))
),
MCsetts)
)
# save the results
save(list=td,file=paste(td,'Rdata',sep='.'))
}
load("C:/Users/Ichchhayakant/Desktop/R/DMwR/GSPC.RData")
View(GSPC)
load("svmR.Rdata")
load("svmC.Rdata")
load("earth.Rdata")
load("nnet.Rdata")
load("nnetR.Rdata")
load("nnetR.Rdata")
load("nnetC.Rdata")
